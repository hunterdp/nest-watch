#!/usr/bin/env python
import sys
import time
import datetime
import json
import ConfigParser
import nest
import influxdb
import pyowm

from ConfigParser import SafeConfigParser
from influxdb import client as influxdb
from pyowm.utils import temputils

class WeatherObj(object):
    def __init__(self, data):
	    self.__dict__ = json.loads(data)


# Read in the configuration information

NestConfig = SafeConfigParser()
NestConfig.read("./nest_watch.ini")

n_id = NestConfig.get('Thermostat', 'id')
n_secret = NestConfig.get('Thermostat', 'secret')
n_cache_file = NestConfig.get('Thermostat', 'cache_file')
n_pin = NestConfig.get('Thermostat', 'pin')

db_server = NestConfig.get('Database', 'server')
db_port = NestConfig.get('Database', 'port')
db_user = NestConfig.get('Database', 'user')
db_pwd = NestConfig.get('Database', 'pwd')
db_name = NestConfig.get('Database', 'name')

w_api_key = NestConfig.get('Weather', 'api_key')
w_location = NestConfig.get('Weather', 'location')
n_lat = NestConfig.get('Weather', 'lat')
n_long = NestConfig.get('Weather', 'long')

series = []

db = influxdb.InfluxDBClient(db_server, db_port, db_user, db_pwd)
db_list = db.get_list_database()
if db_name not in [str(x['name']) for x in db_list]:
    db_err = db.create_database(db_name)
db.switch_database(db_name)

napi = nest.Nest(client_id=n_id,client_secret=n_secret, access_token_cache_file=n_cache_file)
# In interactive mode, this would ask for a pin code
if napi.authorization_required:
    if sys.version_info[0] < 3:
        pin = raw_input("PIN RAW: ")
    else:
        pin = input("PIN: ")
    napi.request_token(pin)
#    napi.request_token(n_pin)


''' Grab the Nest Thermstat information and store in the defined InfluxDB '''
for structure in napi.structures:
    Location = structure.name
    Home_Away = structure.away
    for device in structure.thermostats:
        json_body = {
                "measurement": "temperature",
                "tags": {
                    "location": structure.name,
                    "device": device.name,
                },
                "fields": {
                    "home_away": structure.away,
                    "online": device.online,
                    "emergency_heat": device.is_using_emergency_heat,
                    "mode": device.mode,
                    "state": device.hvac_state,
                    "current": float(device.temperature),
                    "target": float(device.target),
                    "high": float(device.eco_temperature.high),
                    "low": float(device.eco_temperature.low),
                    "humidity": float(device.humidity),
                },
            }
        series.append(json_body)

        ''' get the weather information for the specified location'''
        owm = pyowm.OWM(w_api_key)
        obs = owm.weather_at_coords(n_lat, n_long)
        wx = obs.get_weather()
        wx_data = wx.to_JSON()
        wx_obj = WeatherObj(wx_data)

        wx_json_body = {
            "measurement": "weather",
            "tags": {
                "location": structure.name,
                "device": device.name,
            },
            "fields": {
                "humidity":    float(wx_obj.humidity),
                "status":      wx_obj.detailed_status,
                "cur_temp":    float(temputils.kelvin_to_fahrenheit(wx_obj.temperature['temp'])),
                "max_temp":    float(temputils.kelvin_to_fahrenheit(wx_obj.temperature['temp_max'])),
                "min_temp":    float(temputils.kelvin_to_fahrenheit(wx_obj.temperature['temp_min'])),
                "cloud_cover": wx_obj.clouds,
                "wind_speed":  float(wx_obj.wind['speed']),
                "wind_degree": float(wx_obj.wind['deg']),
                "sunrise":     wx_obj.sunrise_time,
                "sunset":      wx_obj.sunset_time,
            },
        }
        series.append(wx_json_body)
        db.write_points(series)

db.close()
